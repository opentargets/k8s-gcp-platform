#!/bin/bash

# Logging function
log() {
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] $1"
}

# Function to generate a unique identifier
generate_unique_id() {
    local prefix="$1"
    local stack_folder="$2"
    local image_project="$3"
    local image_name="$4"
    
    if [ -z "$prefix" ]; then
        prefix=$(date +%s)
    fi
    
    echo "${prefix}-${stack_folder##*/}-${image_project}-${image_name}" | sed 's/[^a-zA-Z0-9-]/-/g' | cut -c1-63
}

# Check if required arguments are provided
if [ "$#" -lt 3 ]; then
    log "Usage: $0 <stack_folder> <image_project> <image_name> [prefix]"
    exit 1
fi

# Command line arguments collection
stack_folder="$1"
image_project="$2"
image_name="$3"
prefix="${4:-}"

log "Starting script execution with parameters:"
log "Stack folder: $stack_folder"
log "Image project: $image_project"
log "Image name: $image_name"
log "Prefix: ${prefix:-<autogenerated>}"

# Generate unique identifier
unique_id=$(generate_unique_id "$prefix" "$stack_folder" "$image_project" "$image_name")
log "Generated unique identifier: $unique_id"

# Update disk.yaml
disk_name="${unique_id}-disk"
log "Updating disk.yaml"
yq e ".metadata.name = \"$disk_name\"" -i "$stack_folder/disk.yaml"
yq e ".spec.forProvider.image = \"projects/$image_project/global/images/$image_name\"" -i "$stack_folder/disk.yaml"

# Update pv.yaml
pv_name="${unique_id}-pv"
disk_project=$(yq e '.spec.forProvider.project' "$stack_folder/disk.yaml")
disk_zone=$(yq e '.spec.forProvider.zone' "$stack_folder/disk.yaml")
log "Updating pv.yaml"
yq e ".metadata.name = \"$pv_name\"" -i "$stack_folder/pv.yaml"
yq e ".spec.csi.volumeHandle = \"projects/$disk_project/zones/$disk_zone/disks/$disk_name\"" -i "$stack_folder/pv.yaml"

# Update pvc.yaml
pvc_name="${unique_id}-pvc"
log "Updating pvc.yaml"
yq e ".metadata.name = \"$pvc_name\"" -i "$stack_folder/pvc.yaml"
yq e ".spec.volumeName = \"$pv_name\"" -i "$stack_folder/pvc.yaml"

# Update snapshot.yaml
snapshot_name="${unique_id}-snapshot"
log "Updating snapshot.yaml"
yq e ".metadata.name = \"$snapshot_name\"" -i "$stack_folder/snapshot.yaml"
yq e ".spec.source.persistentVolumeClaimName = \"$pvc_name\"" -i "$stack_folder/snapshot.yaml"

# Update app.yaml
app_name="${unique_id}-app"
log "Updating app.yaml"
yq e ".metadata.name = \"$app_name\"" -i "$stack_folder/app.yaml"
yq e ".spec.volumeClaimTemplates[0].spec.dataSource.name = \"$snapshot_name\"" -i "$stack_folder/app.yaml"

log "All files have been updated successfully."